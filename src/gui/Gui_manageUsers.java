/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import DB_Connection.database;
import algorithms.emailValidation;
import database.user;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import utils.User_Dialog;

/**
 *
 * @author Yoni
 */
public class Gui_manageUsers extends javax.swing.JFrame {
    private user User;
 
    /**
     * Creates new form Gui_manageUsers
     */
    public Gui_manageUsers() {
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(Gui_login.DISPOSE_ON_CLOSE);
   }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        users_list = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        jButton5.setText("New User");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Manage Users");

        jLabel1.setText("Grant/Revoke permissions:");

        users_list.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Grant/Revoke Permission");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("New User");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Remove User");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(users_list, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jButton1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel3)
                .addGap(35, 35, 35)
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addComponent(users_list, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton6))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void addUser(){
           
        String email =  User_Dialog.getInputDialog("Enter the email of the user:");
    if (email==null) return;
    email = email.trim();
    boolean ans = emailValidation.isValid(email);
    
    if (!ans) addUser();
        else{
            for (int i=0; i< users_list.getItemCount(); i++){
                if (users_list.getItemAt(i).equals(email)){
                    User_Dialog.showAlert(email + " already exists!");
                    return;
                }
            }
            boolean ok = false;
                ResultSet result = database.query("SELECT name FROM users WHERE email='"+email+"'");
                
            try {
                while (result.next()){ok=true;}
            } catch (SQLException ex) {
                Logger.getLogger(Gui_manageUsers.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (!ok){
                User_Dialog.showAlert("This email address was not found!");
            } else if (email.equals(User.getEmail())) {User_Dialog.showAlert("You can't add youself!");}
            else{
                
                database.query_update("INSERT INTO permissions (owner, usr_email)\n" +
            "    VALUES ('"+ User.getEmail() +"', '"+ email +"');");
                users_list.addItem(email + " (unauthorized)");
            }
        }
    }
    
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
     addUser();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String[] arr = getStatusFromList(users_list.getSelectedItem().toString());
        String email = arr[0];
 
        String status = arr[1];
        int changeTo = -1;
        users_list.setEditable(true);
        int index = users_list.getSelectedIndex();
        users_list.removeItemAt(index);
        String w = "";
        if (status.equals("authorized")) {changeTo=-1; w = email+" (unauthorized)"; users_list.addItem(w); }      
        else if (status.equals("unauthorized")) {changeTo=1; w=email + " (authorized)"; users_list.addItem(w);  }      
        users_list.setSelectedItem(w);
        users_list.setEditable(false);
          database.query_update("UPDATE permissions SET permission="+ changeTo +" WHERE owner='"+ User.getEmail() +"' AND usr_email='"+ email +"';");
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        String str = users_list.getSelectedItem().toString();
        String[] arr = getStatusFromList(str);
        String email = arr[0];
      database.query_update("DELETE from permissions WHERE owner='"+ User.getEmail() +"' AND usr_email='"+ email +"' "
              + "AND permission=1;");
      users_list.removeItem(str);
    }//GEN-LAST:event_jButton6ActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui_manageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui_manageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui_manageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui_manageUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui_manageUsers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox<String> users_list;
    // End of variables declaration//GEN-END:variables

    void setUser(user User) {
        this.User = User;
        loadUserList();
    }

    private void loadUserList() {
        users_list.removeAllItems();
        ResultSet rs = database.query("SELECT usr_email, permission FROM permissions where owner='"+ User.getEmail() +"';");
        try {
            while (rs.next()){
                String email = rs.getString("usr_email");
                int permission = rs.getInt("permission");
               if (permission == -1) email+= " (unauthorized)";
               else if (permission == 1) email += " (authorized)";
               
               users_list.addItem(email);
            }
        } catch (SQLException ex) {
            Logger.getLogger(Gui_manageUsers.class.getName()).log(Level.SEVERE, null, ex);
        }


    }

    private String[] getStatusFromList(String str) {
       if (str.isEmpty()) return null;
        String what[] = str.split(" \\(");
        String email = what[0].trim();
        String status = what[1];
        status = status.substring(0, status.length()-1);
        return new String[]{email , status};
    }

}
