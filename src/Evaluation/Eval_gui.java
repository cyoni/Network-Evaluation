
package Evaluation;

import Account.UserAccount;
import Database.PublicDatabase;
import Utils.User_Dialog;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Yoni
 */
public class Eval_gui extends javax.swing.JFrame {

    private double value;
    private UserAccount user;

    /**
     * Creates new form Eval_gui
     * @param user
     * @param value
     */
    public Eval_gui(UserAccount user, double value) {
        this.user = user;
        initComponents();
        setLocationRelativeTo(null);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setResizable(false);
        this.value = value;
        value_txt.setText("The network's value is $" + value);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        value_txt = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        value_txt.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        value_txt.setText("The network's value is $992.3");

        jButton1.setText("Copy");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View graph");

        jButton3.setText("Save record in database");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("View evaluation log ");

        jButton5.setText("Contact owner");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(value_txt))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addComponent(value_txt)
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addContainerGap(166, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        StringSelection stringSelection = new StringSelection(value_txt.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(stringSelection, null);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        recordValue();
    }//GEN-LAST:event_jButton3ActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel value_txt;
    // End of variables declaration//GEN-END:variables

    private void recordValue() {
         try {
            int answer_from_server = -1;
            String evaluation_data = "";
            Date date = new Date();
            LocalDate localDate = date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            int day = localDate.getDayOfMonth();
            int year = localDate.getYear();
            int month = localDate.getMonthValue();

             System.out.println("month= " + month + "," + year + "," + day);
            ResultSet rs = PublicDatabase.query("SELECT * FROM network_value WHERE email='" + user.getEmail() + "' "
                    + "AND month='" + month + "' AND year='" + year + "'");

             
            if (rs.next()) {
                System.out.println("Evaluation.Eval_gui.recordValue() ############");
                evaluation_data = day + "," + value;
                answer_from_server = PublicDatabase.query_alter_db("INSERT INTO network_value (email, year, month, data) VALUES('" + user.getEmail() + "'"
                        + ", ('" + year + "'), ('" + month + "'), ('" + evaluation_data + "')");
            } else {
                String data_from_database = "";
               
                    while (rs.next()) {
                        data_from_database = rs.getString("data");
                    }

                evaluation_data = data_from_database + ";" + day + "," + value;

                answer_from_server = PublicDatabase.query_alter_db("UPDATE network_value SET data='" + evaluation_data + "' WHERE email='" + user.getEmail() + "' AND year='"+ year +"' AND month='"+ month +"'  ");
            }
            if (answer_from_server == 1) {
                User_Dialog.showAlert("The result has been successfully recorded!");
            } else {
                User_Dialog.showAlert("There was an error while processing this request.");
            }
            
                            } catch (SQLException ex) {
                    Logger.getLogger(Eval_gui.class.getName()).log(Level.SEVERE, null, ex);
                }
       
    }
}
